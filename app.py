# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iq6WUzfXs_8aVQLbCieVIhgmTxMLmheK
"""

import streamlit as st
from streamlit.components.v1 import html

# Your HTML content as a string
html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Green Urban Planning</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(135deg, #6dd5ed, #2193b0);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      font-family: 'Arial', sans-serif;
    }
    .form-container {
      background: white;
      border-radius: 20px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      padding: 40px;
      max-width: 1400px;
      width: 90%;
    }
    .result-container {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
      gap: 20px;
      margin-top: 30px;
    }
    .result-box {
      background-color: #fff;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>
<body>
  <!-- Form Container -->
  <div class="form-container">
    <h1 class="text-3xl font-bold text-green-700 mb-6 text-center">
      <i class="fas fa-seedling mr-2"></i>Green Urban Planning
    </h1>

    <div class="mb-4">
      <label class="block text-sm font-semibold text-gray-700 mb-2">
        <i class="fas fa-map-marker-alt mr-2"></i>Enter Coordinates:
      </label>
      <input type="text" id="latitude" placeholder="Latitude" class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500">
      <input type="text" id="longitude" placeholder="Longitude" class="w-full p-3 border border-gray-300 rounded-lg mt-2 focus:outline-none focus:ring-2 focus:ring-green-500">
    </div>

    <button onclick="fetchData()" class="w-full bg-green-600 text-white p-3 rounded-lg font-semibold hover:bg-green-700 transition duration-300">
      <i class="fas fa-search mr-2"></i>Get Suggestions
    </button>

    <!-- Result Container -->
    <div id="result-container" class="result-container hidden">
      <!-- Location details -->
      <div id="location-box" class="result-box">
        <h2 class="text-2xl font-bold text-green-700">Location Details</h2>
        <p id="location-name" class="text-lg text-gray-700"></p>
      </div>

      <!-- Climate data -->
      <div id="climate-box" class="result-box">
        <h2 class="text-2xl font-bold text-green-700">Climate Data</h2>
        <p id="climate-info" class="text-lg text-gray-700"></p>
      </div>

      <!-- Plant suggestions -->
      <div id="plants-box" class="result-box">
        <h2 class="text-2xl font-bold text-green-700">Plants Suggestions</h2>
        <p id="plant-info" class="text-lg text-gray-700"></p>
      </div>

      <!-- Construction materials -->
      <div id="materials-box" class="result-box">
        <h2 class="text-2xl font-bold text-green-700">Construction Materials</h2>
        <p id="materials-info" class="text-lg text-gray-700"></p>
      </div>

      <!-- Population & Tree Density -->
      <div id="density-box" class="result-box">
        <h2 class="text-2xl font-bold text-green-700">Population & Tree Density</h2>
        <p id="density-info" class="text-lg text-gray-700"></p>
      </div>

      <!-- Energy Model -->
      <div id="energy-model-box" class="result-box">
        <h2 class="text-2xl font-bold text-green-700">Energy Model</h2>
        <p id="energy-model-info" class="text-lg text-gray-700"></p>
      </div>
    </div>
  </div>

  <script>
    // Your JavaScript code here
    async function fetchData() {
        const lat = document.getElementById("latitude").value;
        const lon = document.getElementById("longitude").value;
        const apiKey = "41e6fbe5edd976bfc7e55bde07ba32ed"; // Replace with your API key

        if (!lat || !lon) {
            alert("Please enter both latitude and longitude!");
            return;
        }

        try {
            // Fetch weather data
            const weatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`);
            const weatherData = await weatherResponse.json();

            // Fetch location name (Reverse Geocoding)
            const locationResponse = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
            const locationData = await locationResponse.json();

            // Extract necessary data
            const locationName = locationData.display_name || "Unknown Location";
            const temperature = weatherData.main.temp;
            const weatherCondition = weatherData.weather[0].description;
            const humidity = weatherData.main.humidity;

            // Fill Location details
            document.getElementById("location-name").innerHTML = `<strong>Location:</strong> ${locationName}`;

            // Fill real-time climate data
            document.getElementById("climate-info").innerHTML = `
                <strong>Temperature:</strong> ${temperature}°C<br>
                <strong>Condition:</strong> ${weatherCondition}<br>
                <strong>Humidity:</strong> ${humidity}%
            `;

            // Show the result section
            document.getElementById("result-container").classList.remove("hidden");

            // Fetch and display historical climate data
            fetchClimateData(lat, lon);

            // Fetch and display construction materials
            fetchConstructionMaterials(temperature);

            // Fetch and display population & tree density
            fetchDensity(lat, lon);

            // Fetch and display energy models
            fetchEnergyModel(temperature);

        } catch (error) {
            console.error("Error fetching data:", error);
            alert("Failed to fetch data. Please check your API key and coordinates.");
        }
    }

    // Fetch historical climate data (temperature, rainfall)
    async function fetchClimateData(lat, lon) {
        try {
            // Fetch past climate data (Example: Using Open-Meteo API)
            const climateResponse = await fetch(`https://archive-api.open-meteo.com/v1/archive?latitude=${lat}&longitude=${lon}&start_date=2010-01-01&end_date=2023-12-31&daily=temperature_2m_max,temperature_2m_min,precipitation_sum&timezone=Asia/Kolkata`);
            const climateData = await climateResponse.json();

            // Calculate average temperature & rainfall
            let totalTemp = 0, totalRainfall = 0, count = climateData.daily.temperature_2m_max.length;
            for (let i = 0; i < count; i++) {
                totalTemp += (climateData.daily.temperature_2m_max[i] + climateData.daily.temperature_2m_min[i]) / 2; // Avg temp
                totalRainfall += climateData.daily.precipitation_sum[i]; // Rainfall
            }

            const avgTemp = (totalTemp / count).toFixed(1);
            const avgRainfall = (totalRainfall / count).toFixed(1);

            // Determine climate type
            let climateType = "";
            if (avgTemp > 30) {
                climateType = "Hot and Dry";
            } else if (avgTemp > 25 && avgRainfall > 1000) {
                climateType = "Tropical & Humid";
            } else if (avgTemp > 15) {
                climateType = "Moderate Climate";
            } else {
                climateType = "Cold Climate";
            }

            // Fill climate details
            document.getElementById("climate-info").innerHTML += `
                <br><strong>Average Temperature:</strong> ${avgTemp}°C
                <br><strong>Average Rainfall:</strong> ${avgRainfall} mm/year
                <br><strong>Climate Type:</strong> ${climateType}
                <br><strong>Data from:</strong> 2010 to 2023
            `;

            // Fetch and display plant suggestions
            fetchPlantSuggestions(climateType);

        } catch (error) {
            console.error("Error fetching climate data:", error);
            alert("Failed to fetch climate data.");
        }
    }

    // Function to fetch Population & Tree Density
    function fetchDensity(lat, lon) {
        let peopleDensity = "", treeDensity = "";

        if (lat && lon) {
            peopleDensity = "250-1000 people per km² (depending on urbanization level)";
            treeDensity = "100-1000 trees per km² (suggested for urban greening)";
        }

        // Fill population & tree density
        document.getElementById("density-info").innerHTML = `
            <strong>Population Density:</strong> ${peopleDensity}
            <br><strong>Tree Density:</strong> ${treeDensity}
        `;
    }

    // Function to suggest plants based on climate type
    function fetchPlantSuggestions(climateType) {
        const plantDatabase = {
            "Hot and Dry": ["Neem", "Aloe Vera", "Bael", "Peepal"],
            "Tropical & Humid": ["Coconut", "Banana", "Mango", "Jackfruit"],
            "Moderate Climate": ["Guava", "Pomegranate", "Tamarind", "Jamun"],
            "Cold Climate": ["Pine", "Deodar", "Walnut", "Apple"]
        };

        const plants = plantDatabase[climateType] || ["No suggestions available"];

        document.getElementById("plant-info").innerHTML = `
            <strong>Recommended Plants:</strong> ${plants.join(", ")}
        `;
    }

    // Function to fetch construction materials based on temperature
    function fetchConstructionMaterials(temperature) {
        let preferredMaterials = "", avoidedMaterials = "";

        if (temperature > 30) {
            preferredMaterials = "Heat-resistant materials like Clay, Ceramic tiles, Reflective coatings.";
            avoidedMaterials = "Materials that absorb heat like Concrete and Steel should be avoided.";
        } else if (temperature > 25) {
            preferredMaterials = "Natural stones like Granite, Marble for better insulation.";
            avoidedMaterials = "Avoid glass or other reflective materials that can amplify sunlight.";
        } else if (temperature > 15) {
            preferredMaterials = "Wood, Brick for insulation, and natural ventilation.";
            avoidedMaterials = "Avoid heavy concrete for outdoor walls in moderate climates.";
        } else {
            preferredMaterials = "Insulated walls with double glazing windows.";
            avoidedMaterials = "Avoid using aluminum or steel which can trap cold air inside.";
        }

        document.getElementById("materials-info").innerHTML = `
            <strong>Preferred Materials:</strong> ${preferredMaterials}
            <br><strong>Avoid Materials:</strong> ${avoidedMaterials}
        `;
    }

    // Function to suggest energy model based on temperature
    function fetchEnergyModel(temperature) {
        let energyModel = "";

        if (temperature > 30) {
            energyModel = "Solar energy (high priority), Wind energy (moderate).";
        } else if (temperature > 25) {
            energyModel = "Solar energy (high priority), Wind energy (moderate).";
        } else if (temperature > 15) {
            energyModel = "Solar energy (moderate), Wind energy (moderate).";
        } else {
            energyModel = "Wind energy (high priority), Solar energy (moderate).";
        }

        // Fill energy model
        document.getElementById("energy-model-info").innerHTML = `
            <strong>Suggested Energy Model:</strong> ${energyModel}
        `;
    }
  </script>
</body>
</html>
"""

# Embed the HTML content in the Streamlit app
html(html_content, width=1400, height=800)

# Optional: Add Streamlit components or text
st.write("This is a Streamlit app with an embedded urban planning model.")

